<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClientSDK</name>
    </assembly>
    <members>
        <member name="M:ClientSDK.ClientNetwork.SetCredentials(Game.Events.ServerEvents.LoginResultPacket)">
            <summary>
            Whenever we receive credentials we use it to handshake with the servers
            </summary>
        </member>
        <member name="T:ClientSDK.Data.IClientWorld">
            <summary>
            Implementation of the game world for the client SDK.
            Instead of requiring to have all tiles generated, it will lazy generate tiles.
            </summary>
        </member>
        <member name="T:ClientSDK.Data.LazyLoadedPlayers">
            <summary>
            Will create players as players are requests but not available
            </summary>
        </member>
        <member name="F:ClientSDK.Data.EntityViewState.NOT_RENDERED">
            <summary>
            When an view is created but not yet rendered
            </summary>
        </member>
        <member name="F:ClientSDK.Data.EntityViewState.RENDERING">
            <summary>
            When a view is rendering at this moment
            </summary>
        </member>
        <member name="F:ClientSDK.Data.EntityViewState.RENDERED">
            <summary>
            When a view is completely rendered
            </summary>
        </member>
        <member name="T:ClientSDK.Data.IEntityView">
            <summary>
            Represents a graphical representation of game entity that the client is aware of
            </summary>
        </member>
        <member name="P:ClientSDK.Data.IEntityView.Entity">
            <summary>
            Gets the base entity of this view
            </summary>
        </member>
        <member name="P:ClientSDK.Data.IEntityView.Client">
            <summary>
            Gets the reference of the game client
            </summary>
        </member>
        <member name="P:ClientSDK.Data.IEntityView.State">
            <summary>
            Current client state of this view
            </summary>
        </member>
        <member name="M:ClientSDK.Data.IEntityView.RenderView">
            <summary>
            Create the new graphical part of this view
            </summary>
        </member>
        <member name="T:ClientSDK.Data.IClientEvent">
            <summary>
            To mark a game event as a only client SDK event
            </summary>
        </member>
        <member name="T:ClientSDK.Data.IGameService">
            <summary>
            Can be used as a entry point for client related services
            </summary>
        </member>
        <member name="T:ClientSDK.Data.LazyLoadChunkMap">
            <summary>
            Chunk map that can lazy load tiles and chunk into memory
            </summary>
        </member>
        <member name="T:ClientSDK.Data.OtherPlayer">
            <summary>
            Represents another player thats not the local player
            </summary>
        </member>
        <member name="T:ClientSDK.IGameClient">
            <summary>
            Main client SDK. Should be imported by the game client and consumed to run and display the game
            Contains all base functionality to run parts of the game client-side more easily.
            </summary>
        </member>
        <member name="P:ClientSDK.IGameClient.Game">
            <summary>
            Main game instance, where entities, networking and the world data are handled
            </summary>
        </member>
        <member name="P:ClientSDK.IGameClient.Modules">
            <summary>
            Client SDK modules that can perform server specific interactions
            </summary>
        </member>
        <member name="P:ClientSDK.IGameClient.Network">
            <summary>
            Exposed network to be used. References to Game.Network
            </summary>
        </member>
        <member name="P:ClientSDK.IGameClient.ClientEvents">
            <summary>
            Client specific triggered event bus
            </summary>
        </member>
        <member name="P:ClientSDK.IGameClient.Log">
            <summary>
            General client SDK log
            </summary>
        </member>
        <member name="T:ClientSDK.Services.IAccountModule">
            <summary>
            Service responsible for handling authentication and specific account and profile information.
            Will perform the initial login flow until world is joined.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IAccountModule.SendAuthenticationPacket(System.String,System.String)">
            <summary>
            Sends a request to authenticate to server
            </summary>
        </member>
        <member name="T:ClientSDK.Services.IActionModule">
            <summary>
            Module for player input actions. This module encapsulates all potential actions the player can do on the game using network
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IActionModule.MoveEntity(Game.Engine.ECLS.IEntity,Game.Tile.TileModel,Game.Systems.Movement.CourseIntent)">
            <summary>
            Tries to move the given entity to the target destination.
            Will return true or false if the entity is able to move there or not.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IActionModule.StopEntity(Game.Engine.ECLS.IEntity)">
            <summary>
            Stops the party for any actions.
            </summary>
        </member>
        <member name="T:ClientSDK.Services.IBattleModule">
            <summary>
            Has battle specific networking implementation
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IBattleModule.RequestBattleLog(Game.Engine.DataTypes.GameId@)">
            <summary>
            Requests a full battle log to view the full battle
            Will fire a BattleLogReceivedEvent
            </summary>
        </member>
        <member name="P:ClientSDK.Services.IBattleModule.BattleHeaders">
            <summary>
            Gets the list of battle headers for this player
            </summary>
        </member>
        <member name="T:ClientSDK.Services.IBuildingModule">
            <summary>
            Service responsible for handling authentication and specific account and profile information
            </summary>
        </member>
        <member name="T:ClientSDK.Services.IEntityModule">
            <summary>
            Service that controls entities that the game client is aware of.
            Expose basic entity control functionality like moving or taking entity actions.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IEntityModule.OnComponentUpdate``1(System.Action{Game.Engine.ECLS.IEntity,``0,``0})">
            <summary>
            Registers a component sync. 
            Whenever the given entity type has the given component type updated, instead of the values simply being copied
            the sync code will be called.
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IEntityModule.OnComponentRemoved``1(System.Action{Game.Engine.ECLS.IEntity,``0})">
            <summary>
            Registers a component removed callback. 
            Whenever the given entity type has the given component type removed, the callback will be called after the operation has been done..
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IEntityModule.OnComponentAdded``1(System.Action{Game.Engine.ECLS.IEntity,``0})">
            <summary>
            Registers a component removed callback. 
            Whenever the given entity type has the given component type removed, the callback will be called after the operation has been done..
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IEntityModule.RemoveListener(System.Object)">
            <summary>
            Removes all event callbacks from the given object
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IGameView.GetOrCreateView(Game.Engine.ECLS.IEntity)">
            <summary>
            Gets or creates a given entity view
            </summary>
        </member>
        <member name="M:ClientSDK.Services.IGameView.GetEntityView(Game.Engine.ECLS.IEntity)">
            <summary>
            Gets an uncasted entity view
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ClientSDK.Services.IPlayerModule" -->
        <member name="P:ClientSDK.Services.IPlayerModule.PlayerId">
            <summary>
            Gets the local player user id
            </summary>
        </member>
        <member name="P:ClientSDK.Services.IPlayerModule.LocalPlayer">
            <summary>
            Gets the local player reference.
            Shall contain all data the client is aware of
            </summary>
        </member>
        <member name="T:ClientSDK.Modules.IChatModule">
            <summary>
            Allows player to send chat messages. Will handle receiving messages too.
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IChatModule.GetThumbnail">
            <summary>
            Gets the last two messages of the chat
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IChatModule.GetFullChat">
            <summary>
            Gets the full chat history
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IChatModule.SendMessage(System.String)">
            <summary>
            Sends a message to chat
            </summary>
        </member>
        <member name="T:ClientSDK.Modules.IComponentSync">
            <summary>
            Enables the game to more specifically control how to update components.
            Components can be synced automatically (just copy data) or have manual syncs to handle things manually.
            This module is able to implement callbacks from when a given component is synced so the client can react to it.
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IComponentSync.ProccessUpdate(Game.Engine.ECLS.IEntity,Game.Engine.ECLS.IComponent[],System.UInt32[])">
            <summary>
            Updates the components of the given entity
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IComponentSync.OnComponentUpdate``1(System.Action{Game.Engine.ECLS.IEntity,``0,``0})">
            <summary>
            Registers a component sync. 
            Whenever the given entity type has the given component type updated, instead of the values simply being copied
            the sync code will be called.
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IComponentSync.OnComponentRemoved``1(System.Action{Game.Engine.ECLS.IEntity,``0})">
            <summary>
            Registers a component removed callback. 
            Whenever the given entity type has the given component type removed, the callback will be called after the operation has been done..
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IComponentSync.OnComponentAdded``1(System.Action{Game.Engine.ECLS.IEntity,``0})">
            <summary>
            Registers a component removed callback. 
            Whenever the given entity type has the given component type removed, the callback will be called after the operation has been done..
            The callback has the Entity, OLD VALUE and NEW VALUE parameters.
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.IComponentSync.RemoveListener(System.Object)">
            <summary>
            Removes all event callbacks from the given object
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.ComponentSynchronizer.ProccessUpdate(Game.Engine.ECLS.IEntity,Game.Engine.ECLS.IComponent[],System.UInt32[])">
            <summary>
            Updates the components of the given entity.
            Will copy all new values to old values
            Any registered component sync callbacks will be called after all updates are done
            </summary>
        </member>
        <member name="T:ClientSDK.Modules.ILogicModule">
            <summary>
            Module responsible for handling base component logic to keep the client logic "up to date"
            This module single responsibility is to try to keep the client game in sync with server game as most as it can
            The only thing this won't keep track is the player data which is handled in <see cref="T:ClientSDK.Services.IPlayerModule"/>
            </summary>
        </member>
        <member name="M:ClientSDK.Modules.LogicModule.OnUpdatePlacement(Game.Engine.ECLS.IEntity,Game.Systems.Map.MapPlacementComponent,Game.Systems.Map.MapPlacementComponent)">
            <summary>
            Whenever map placement updates are sent to the client we re-position the entity on the client logic.
            This will trigger all exploration events
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.ChatUpdateEvent">
            <summary>
            Called when chat updates. Either when receiving a new message or chat log received.
            </summary>
        </member>
        <member name="F:ClientSDK.SDKEvents.ChatUpdateEvent.NewPacket">
            <summary>
            Can be null when receiving more than one
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.EntityMovementRequestStarted">
            <summary>
            Event triggered whenever a player attempts to move an entity and the request is sent to server.
            Server can still stop the movement, this is a client sided event.
            After this is sent the client should start to receive component updates regarding the movement.
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.EntityViewCreated">
            <summary>
            Triggered when the client gets aware of a new entity.
            This is only called when the entity is created for the first time
            So if player sees an entity, this entity goes to the fog and comes back this is not called twice
            This is not applied to tiles or players
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.GameStartedEvent">
            <summary>
            Triggered when the client created the game instance and its ready to start receiving data from server
            This is triggered right after game specs are received and the game instance is setup
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.OwnBattleFinishedEvent">
            <summary>
            Called whenever a battle owned by the player is finished.
            </summary>
        </member>
        <member name="T:ClientSDK.SDKEvents.OwnEntityInfoReceived">
            <summary>
            Whenever the local player receives info of his own entities
            This event can be used to display own entity updates on the UI 
            When this event fires the entity should have all its components synced.
            </summary>
        </member>
        <member name="T:ClientSDK.IClientModule">
            <summary>
            A client SDK module that helps to integrate with the game and server data
            </summary>
        </member>
        <member name="M:ClientSDK.IClientModule.Register">
            <summary>
            Registers the module after all modules are initialized
            </summary>
        </member>
        <member name="T:ClientSDK.IServerModules">
            <summary>
            Handles server communication and event backs.
            </summary>
        </member>
    </members>
</doc>
